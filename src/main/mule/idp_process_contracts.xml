<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:ms-inference="http://www.mulesoft.org/schema/mule/ms-inference"
	xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/ms-inference http://www.mulesoft.org/schema/mule/ms-inference/current/mule-ms-inference.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
	<flow name="idp_process_contractsFlow" doc:id="b46fd269-2fe3-46fa-9ea2-86672ce2fca0" >
		<http:listener doc:name="POST /process/document" doc:id="60ff541c-ed89-41e9-856b-8d46e51d79a6" path="/process/document" config-ref="REST_Trigger_HTTP_Listener_config" allowedMethods="POST"/>
		<logger level="INFO" doc:name="Logger" doc:id="13d639d7-3de0-4bcf-a442-62da4e31cbc6" message="Entering /rpocess/document with payload: #[payload]"/>
		<set-variable value='#[%dw 2.0&#10;output application/java&#10;---&#10;{&#10;  job_id: payload.job_id  as String,&#10;  auth_client_id: payload.auth_client_id  as String,&#10;  auth_client_secret: payload.auth_client_secret  as String,&#10;  idp_http_request: {&#10;    host: payload.idp_http_request.host  as String,&#10;    base_path: payload.idp_http_request.base_path  as String,&#10;    executions_path: payload.idp_http_request.executions_path  as String,&#10;    protocol: payload.idp_http_request.protocol  as String&#10;  },&#10;  full_url: "https://" ++ payload.idp_http_request.host  as String&#10;  				++ payload.idp_http_request.base_path as String&#10;  				++ payload.idp_http_request.executions_path  as String&#10;}]' doc:name="Set Variable" doc:id="f49d7ed5-457f-45a8-9eb8-2d1e4aa3c931" variableName="idpExecution"/>
		<logger level="INFO" doc:name="Logger" doc:id="b7a9a510-4f97-4c5b-a2f6-7df5f37b0a18" message="Variable idpExecution = #[vars.idpExecution]"/>
		<choice doc:name="Choice" doc:id="cef18876-2593-4c3d-8fff-7176a3856249">
			<when expression="#[!isEmpty(attributes.queryParams.info) and attributes.queryParams.info == 'true']">
				<scripting:execute doc:name="Execute" doc:id="aa2a86be-e772-45be-8a14-c89f430009f0" engine="Groovy">
					<scripting:code ><![CDATA[def allVariables = muleEvent.getVariables()
muleEvent.setPayload(allVariables)]]></scripting:code>
				</scripting:execute>
				<ee:transform doc:name="Transform Message" doc:id="f7cd7ef9-08dc-48c1-a337-276c5e387190">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	payload: payload as Object,
	vars: vars as Object pluck $$
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise>
				<set-variable value="#[vars.idpExecution.job_id as String]" doc:name="Set JobId" doc:id="08200f2f-b5f1-4f8e-ab48-c39de2c952bf" variableName="jobId" />
				<flow-ref doc:name="Authenticate Anypoint User" doc:id="b2254b8c-bea2-4f65-8dad-46e0c7114779" name="authenticate_Anypoint_User" />
				<flow-ref doc:name="Read File" doc:id="43085465-1cd4-401c-90a5-9bdd0a8a4e86" name="read_File" />
				<flow-ref doc:name="Call IDP Service - Execution" doc:id="c12f6b9b-c5ef-44a6-a875-d7784982e705" name="call_IDP_Service" />
				<flow-ref doc:name="Get Results from IDP Service - Polling" doc:id="9b9994b1-ab6f-4529-ac17-42aadc54c289" name="get_Results_From_IDP_Service" />
				<!-- [STUDIO:"Transform Message"]<ee:transform doc:name="Transform Message" doc:id="1cb7be50-f7a9-4a9c-bfca-98e4f876de62">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/java

// Check if payload has pages structure
var hasPages = payload.pages?

&#45;&#45;-
if (hasPages)
    // Already has pages, return as-is
    payload
else
    // Add pages structure
    {
        id: payload.id,
        documentName: payload.documentName,
        status: payload.status,
        pages: [
            {
                page: 1,
                fields: payload.fields,
                tables: payload.tables default [&#93;
            }
        &#93;
    }&#93;&#93;></ee:set-payload>
							</ee:message>
						</ee:transform> [STUDIO] -->
				<ee:transform doc:name="Transform Message" doc:id="75003760-d955-49bf-ab63-a35bd2af467e">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::core::Strings
import * from dw::Runtime
// Helper function to parse JSON if valid, otherwise return as-is
fun parseIfJson(str: String): Any = 
    try(() -> read(str, "application/json")) orElse str

// Helper function to process fields
fun processFields(fields: Object): Object = 
    fields mapObject ((fieldValue, fieldKey) -> {
        (fieldKey): if (fieldKey == "terms")
            // For 'terms' field, split by "." and process each part
            (fieldValue.value splitBy ".") map trim($)
        else if (fieldValue is Object and fieldValue.value?)
            // If it has a .value property, extract and parse if JSON
            parseIfJson(fieldValue.value)
        else if (fieldValue is Object)
            // If it's a nested object (like parties), recursively process it
            processFields(fieldValue)
        else
            // Otherwise return as-is
            fieldValue
    })

// Helper function to process tables
fun processTables(tables: Object): Object = 
    tables mapObject ((tableValue, tableKey) -> {
        (tableKey): if (tableValue is Array)
            // If it's an array, process each row
            tableValue map ((row) -> 
                if (row is Object)
                    // Process each field in the row to extract .value
                    row mapObject ((cellValue, cellKey) -> {
                        (cellKey): if (cellValue is Object and cellValue.value?)
                            parseIfJson(cellValue.value)
                        else
                            cellValue
                    })
                else
                    row
            )
        else
            tableValue
    })

// Check if payload has pages structure or direct fields
var hasPages = payload.pages?

var processedPages = if (hasPages)
    // Process existing pages structure
    payload.pages map {
        page: $.page,
        fields: processFields($.fields),
        tables: processTables($.tables)
    }
else
    // Create pages structure from direct fields
    [{
        page: 1,
        fields: processFields(payload.fields),
        tables: processTables(payload.tables default {})
    }]

---
{
    id: payload.id,
    documentName: payload.documentName,
    status: payload.status,
    pages: processedPages
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<logger level="DEBUG" doc:name="Logger" doc:id="ee72fed4-c699-48c1-a248-a290166ea8ae" message="Formatted Return from IDP: #[payload]" />
			</otherwise>
		</choice>
	</flow>
	<sub-flow name="read_File" doc:id="cd6e6b2f-50c5-4789-9fe8-1555c820906b">
		<db:select doc:name="Get File with Data" doc:id="830601bd-be10-41f8-ba3b-3b74f0b86fa7" config-ref="Database_Config" target="file">
			<db:sql><![CDATA[select job_id, filename, file_content_base64, mime_type 
from uploads where job_id = :job
and upload_type = 'contract']]></db:sql>
			<db:input-parameters><![CDATA[#[{
	job: vars.jobId
}]]]></db:input-parameters>
		</db:select>
		<ee:transform doc:name="Transform Message" doc:id="f23cc49f-d04b-469f-94ca-5a56ffe9c58f">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import * from dw::core::Binaries
output application/octet-stream  with binary// or the specific MIME type of your file (e.g., application/pdf, image/png)
---
fromBase64(vars.file[0].file_content_base64 as String) as Binary]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<set-variable value="#[payload]" doc:name="Set Variable" doc:id="442e6ff6-c964-4381-bfdc-56d45f5b52d1" variableName="fileData"/>
	</sub-flow>
	<flow name="get-idp-result" doc:id="61bd9456-915c-4d52-be05-fc0f115d41be" >
		<http:listener doc:name="/document/result" doc:id="da5ca0f9-00c3-4aa4-937f-a7feaacf8795" config-ref="REST_Trigger_HTTP_Listener_config" path="/document/result"/>
		<set-variable value='#[attributes.queryParams.id as String default ""]' doc:name="Set executionid" doc:id="8df0c2ce-37c5-4460-baa2-fca47709aaf7" variableName="executionId"/>
		<logger level="INFO" doc:name="Logger" doc:id="c43593d2-5c97-4f61-aed3-6e3b23fe85ca" message="ExecutionId: #[vars.executionid]"/>
		<flow-ref doc:name="Authenticate Anypoint User" doc:id="e71690ed-4517-4683-828d-a4212f8480e2" name="authenticate_Anypoint_User" />
		<flow-ref doc:name="Get Results from IDP Service - Polling" doc:id="ba32037a-764e-4ef7-b710-515d284e4abf" name="get_Results_From_IDP_Service" />
		<ee:transform doc:name="Transform Message" doc:id="7a9d1f39-dbf8-40d8-a76d-641dd7455b48" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
    document: payload.documentName,
    status: payload.status,
    terms: payload.fields.terms.value splitBy  ".",
    products: payload.fields.products.value splitBy  "."
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="get-flows-with-prompts" doc:id="f0942a45-0aa7-4985-81eb-1389104edbb8">
		<http:listener doc:name="GET /flows" doc:id="29519f03-66d9-40de-b8c3-dccbea43c36d" config-ref="REST_Trigger_HTTP_Listener_config" path="/flows" allowedMethods="GET" />
		<ee:transform doc:name="Transform Message" doc:id="b4bec586-9a99-4466-99cf-172525716e07">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	flows: [
		{
			name: "analyze",
			description: "This process analyzes extracted contract data from IDP and cross references it with excel data ",
			url: "/analyze",
			method: "POST",
			vars: [
				{
					name: "contract",
					"type": "json",
					"mandatory": false
				},
				{
					name: "excel",
					"type": "json",
					mandatory: false
				}
			],
			
		}
	]
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<sub-flow name="get-prompt" doc:id="7f69895b-7233-473f-abdb-23600d19098d" >
		<db:select doc:name="Select" doc:id="87e19008-be05-4d41-a99e-a3c824efd1fa" config-ref="Database_Config">
			<db:sql ><![CDATA[select content from prompts
where id = :promptid]]></db:sql>
			<db:input-parameters ><![CDATA[#[{
promptid: vars.promptId
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="4f3212c6-ce63-4133-8055-ee8cb3f6c861">
			<when expression="#[!isEmpty(payload[0].content)]">
				<db:select doc:name="Select" doc:id="531af147-8fd3-4b23-a69e-c6b669a4a43c" target="promptVariables" config-ref="Database_Config">
					<db:sql ><![CDATA[select variable_name 
from prompt_variables pv
where id = :promptid]]></db:sql>
					<db:input-parameters ><![CDATA[#[{
promptid: vars.promptId
}]]]></db:input-parameters>
				</db:select>
				<ee:transform doc:name="Transform Message" doc:id="9b621771-0636-486c-ba74-02af6c63d82d" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
{
	prompt: payload[0].content,
	vars: vars.promptVariables map (item) -> item.variable_name
}
]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</when>
			<otherwise>
				<ee:transform doc:name="Transform Message" doc:id="4d29031e-fa21-4dc6-bd1c-84f01ecbc0d3">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json

// ======================================
// === Prepare JSON strings for prompt ===
// ======================================
var contractJsonStr = write(vars.contract, "application/json", {indent: 2})
var excelSummaryStr = write(vars.data,   "application/json", {indent: 2})

// ============================
// === Build the full prompt ===
// ============================
var fullPrompt =
    "You are a **business and data analyst** specializing in **contract compliance validation** for distribution agreements.\n" ++
    "Your task is to **analyze customer sales data in Excel format** against the provided contract reference data.\n\n" ++
    "---\n\n" ++
    "### 📝 Contract Data (JSON)\n" ++
    contractJsonStr ++ "\n\n" ++
    "---\n\n" ++
    "### 🎯 Your Objectives\n" ++
    "1. **Validate** the provided Excel dataset against the contract:\n" ++
    "   - Compare all product SKUs listed in the contract to those in the Excel file.\n" ++
    "   - Check quantities, limits, pricing logic, and promotional mechanics.\n" ++
    "   - Identify missing, extra, or mismatched products.\n" ++
    "   - Evaluate compliance with all contract terms (funding split, bundle type, daily unit limits, etc.).\n\n" ++
    "2. **Generate outputs in two parts:**\n" ++
    "   - **(A) JSON Summary:** A structured JSON object with standardized sections for automation.\n" ++
    "   - **(B) Markdown Report:** A human-readable `.md` report summarizing your findings.\n\n" ++
    "---\n\n" ++
    "### ⚙️ Output Specification\n\n" ++
    "#### (A) JSON Summary (Machine-Readable)\n" ++
    "Output a single JSON object with the following top-level structure:\n" ++
    "```json\n" ++
    "{\n" ++
    "  \"contract_summary\": {\n" ++
    "    \"document\": \"...\",\n" ++
    "    \"terms\": [...],\n" ++
    "    \"products_reference\": [...]\n" ++
    "  },\n" ++
    "  \"validation_summary\": {\n" ++
    "    \"matched_products\": [...],\n" ++
    "    \"missing_products\": [...],\n" ++
    "    \"over_limit_products\": [...],\n" ++
    "    \"quantity_discrepancies\": [...],\n" ++
    "    \"pricing_issues\": [...],\n" ++
    "    \"term_violations\": [...]\n" ++
    "  },\n" ++
    "  \"anomalies_detected\": [\n" ++
    "    {\"issue\": \"...\", \"explanation\": \"...\", \"possible_cause\": \"...\"}\n" ++
    "  ],\n" ++
    "  \"compliance_score\": \"XX%\",\n" ++
    "  \"recommendations\": [\n" ++
    "    \"...\"\n" ++
    "  ]\n" ++
    "}\n" ++
    "```\n\n" ++
    "---\n\n" ++
    "### 📊 Excel Data (Aggregated Summary)\n" ++
    "Use this JSON as the ground truth for product totals:\n\n" ++
    excelSummaryStr ++ "\n\n" ++
    "Return **JSON first** (per schema above), then **Markdown**.\n" ++
    "Follow all rules and structure from the Contract Compliance Prompt Template."

// =====================
// === Final output  ===
// =====================
---
{
  prompt: fullPrompt,
  vars: ["contractJsonStr","excelSummaryStr"]
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</otherwise>
		</choice>
	</sub-flow>
	<flow name="analyze-contract" doc:id="fe02a2a0-de9d-4ae5-b699-9320aca5da07">
		<http:listener doc:name="/analyze" doc:id="51cfc361-cf28-48a2-90fc-36241c8e0e71" config-ref="REST_Trigger_HTTP_Listener_config" path="/analyze" allowedMethods="POST" />
		<logger level="INFO" doc:name="Logger" doc:id="65ddce5e-8da8-484f-a152-0fe77015704c" message="Starting Analyze body = #[payload]"/>
		<choice doc:name="Choice" doc:id="9fe66fae-ec85-49a8-8fbb-f1a0e95828ad" >
			<when expression="#[isEmpty(payload)]">
				<ee:transform doc:name="Transform Message" doc:id="60eb2ee8-d208-4018-9e9d-e8c627f848ce" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
  "status": "FAILED",
  "error": "Contract data is missing, it needs to come in the body",
  "analysis_markdown": "",
  "data_table": []
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="e84fdf6d-6c27-4dd9-8e4b-e59145ddead2" message="#[payload]"/>
			</when>
			<otherwise >
				<set-variable value="#[payload.job_id]" doc:name="Set JobId" doc:id="04093277-09cc-4b20-9d3a-86bce5adc046" variableName="jobId" />
				<set-variable value='#[%dw 2.0&#10;output application/json&#10;---&#10;(payload.variables filter ($.name == "contract"))[0].value as Object default {}]' doc:name="Set Contract" doc:id="ccacf3c7-8412-4f30-95dd-1fe1cca9b640" variableName="contract" />
				<set-variable value="#[payload.prompt.id as Number default 1]" doc:name="Set Prompt ID" doc:id="b66e7d80-9135-40d1-960a-69fb4a316543" variableName="promptId"/>
				<db:select doc:name="Get File with Data" doc:id="cafcc911-f21f-4364-8835-f3bd42fd9d5d" config-ref="Database_Config" target="xlsData">
			<db:sql><![CDATA[select job_id, filename, file_content_base64, mime_type 
from uploads where job_id = :job
and upload_type = 'data']]></db:sql>
			<db:input-parameters><![CDATA[#[{
	job: vars.jobId
}]]]></db:input-parameters>
		</db:select>
				<choice doc:name="Choice" doc:id="deb58733-0444-42ce-9767-b7dda13a15ca">
			<when expression="#[!isEmpty(payload[0])]">
				<choice doc:name="Choice" doc:id="e308ef93-289f-43db-b608-a915599bdf64">
							<when expression='#[vars.xlsData[0].mime_type == "text/csv"]'>
								<set-variable value="#[%dw 2.0&#10;    import * from dw::core::Binaries&#10;    output application/octet-stream  with binary// or the specific MIME type of your file (e.g., application/pdf, image/png)&#10;    ---&#10;    fromBase64(vars.xlsData[0].file_content_base64 as String) as Binary]" doc:name="Set File as Binary" doc:id="6343cb51-ef56-43eb-af14-21e6cbe201c1" variableName="raw" />
								<set-variable value='#[%dw 2.0output application/json&#10;---&#10;read(vars.raw, "test/csv") // produces an array of rows]' doc:name="Set Variable" doc:id="d04b1a32-5645-4a60-8297-db65a91f5318" variableName="data" />
							</when>
							<otherwise >
								<set-variable value="#[%dw 2.0&#10;    import * from dw::core::Binaries&#10;    output application/octet-stream  with binary// or the specific MIME type of your file (e.g., application/pdf, image/png)&#10;    ---&#10;    fromBase64(vars.xlsData[0].file_content_base64 as String) as Binary]" doc:name="Set File as Binary" doc:id="fd7c62aa-1618-4064-b597-52df74aac787" variableName="raw" />
								<set-variable value='#[%dw 2.0output application/json&#10;---&#10;read(vars.raw, "application/xlsx") // produces an array of rows]' doc:name="Set Variable" doc:id="a09a23be-61f2-4a04-baef-262b04c7c92a" variableName="data" />
							</otherwise>
						</choice>
						<logger level="INFO" doc:name="Logger" doc:id="936a22a8-1409-4400-b4ef-727e46f08b16" message='Excel file data: #[write(vars.data,   "application/json", {indent: 2})]' />
				<flow-ref doc:name="Get Prompt" doc:id="eb615069-5a11-432c-9f62-04120d0ff7ee" name="get-prompt"/>
						<ee:transform doc:name="Transform Message" doc:id="d83d03e9-f8b1-498d-a4d0-d77bcf18fd17">
							<ee:message>
								<ee:set-payload><![CDATA[%dw 2.0
output application/json

var contractJsonStr = write(vars.contract, "application/json", {indent: 2})
var excelSummaryStr = write(vars.data,   "application/json", {indent: 2})

---
{
  prompt: payload.prompt,
  instructions: "Follow the instructions precisely, do not add any information not provided. Do not ask qny questions. Use the template and replace anything between {{}} with an element of the data provided. If none, use all the data. Do not add any comments inside the json file with // or /**/ at all, CRITICAL FORMATTING RULES: 1. Start with ```json (not ``` or other variants) 2. After the closing ```, use exactly: \n\n---\n\n 3. Then start the markdown section with # heading 4. Do NOT include any comments like \/\/ Additional products... in the JSON",
  vars: payload.vars,
  data: write({
	  contract: contractJsonStr,
	  excel: excelSummaryStr
  },   "application/json", {indent: 2})
}
]]></ee:set-payload>
							</ee:message>
						</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="8a257002-7890-4b4f-b432-57a144b555c3" message="Sending data #[payload]"/>
						<ms-inference:agent-define-prompt-template doc:name="[Agent] Define Prompt Template" doc:id="413144a2-336c-4d62-bc6c-d1abd717508b" config-ref="MuleSoft_Inference_Text_generation_config" >
							<ms-inference:template ><![CDATA[#[payload.prompt]]]></ms-inference:template>
							<ms-inference:instructions ><![CDATA[#[payload.instructions]]]></ms-inference:instructions>
							<ms-inference:data ><![CDATA[#[payload.data]]]></ms-inference:data>
						</ms-inference:agent-define-prompt-template>
						<logger level="INFO" doc:name="Logger" doc:id="324c57e7-9f13-4e79-ad28-377631474b05" message="#[payload]"/>
						<ee:transform doc:name="Transform Message1" doc:id="a0d6a402-b8a4-46e6-9864-0b96bcbd3e9b">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
import * from dw::core::Strings

// Remove all comments
var cleanedResponse = payload.response replace /\/\/.*(\n|$)/ with ""

// Split by triple backticks to get the JSON
var parts = cleanedResponse splitBy "```"

// parts[1] should be the JSON (may have "json" prefix)
var jsonWithPrefix = trim(parts[1])
// Remove "json" prefix if it exists
var jsonString = if (jsonWithPrefix startsWith "json")
    trim(jsonWithPrefix[4 to -1])
else
    jsonWithPrefix

// Find the markdown section (could start with either "---" or "```")
var markdownStartDashes = cleanedResponse indexOf "\n---\n"
var markdownStartBackticks = cleanedResponse indexOf ("\n```\n#")

// Use whichever marker is found
var markdownStart = if (markdownStartDashes != -1) markdownStartDashes
                    else if (markdownStartBackticks != -1) markdownStartBackticks
                    else -1

var markdownContent = if (markdownStart != -1)
    trim(cleanedResponse[markdownStart + 5 to -1])
else ""

---
{
    status: "SUCCEEDED",
    analysis_markdown: markdownContent,
    jsonData: read(jsonString, "application/json"),
    data_table: []
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</when>
			<otherwise>
				<ee:transform doc:name="Transform Message" doc:id="26eced26-d2f5-4915-86dc-faf2932e604d">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
  "status": "FAILED",
  "error": "No xls file to send",
  "analysis_markdown": "",
  "data_table": []
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
						<logger level="INFO" doc:name="Logger" doc:id="52524f61-dbb9-4434-b7f8-ee4a0bdcfe2b" message="#[payload]" />
			</otherwise>
		</choice>
			</otherwise>
		</choice>
		<logger level="DEBUG" doc:name="Logger" doc:id="d138f9a6-25ed-4843-b7be-282f3ea43095" message="Sending back #[payload]" />
	</flow>
	<sub-flow name="call_IDP_Service" doc:id="55f3e881-e393-4253-90fd-5176d91dda6a">
		<set-variable value='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;    "type": "GENERIC",&#10;    "queries": [&#10;        {&#10;            "query": "Extract the promotional terms for each product",&#10;            "name": "terms"&#10;        },&#10;        {&#10;            "query": "Give me a list of products, units sold, reference price",&#10;            "name": "products"&#10;        },&#10;        {&#10;            "query": "What is the requestor name?",&#10;            "name": "req_name"&#10;        },&#10;        {&#10;            "query": "This is a selling contract ofr a distributor with a retailer, Summarize the document content.",&#10;            "name": "documentSummary"&#10;        }&#10;    ],&#10;    "features": [&#10;        "QUERIES"&#10;    ],&#10;    "analyzers": [&#10;        &#10;    ],&#10;    "confidenceScore": 80&#10;}]' doc:name="configuration" doc:id="6849b8b7-474b-4c9c-ba0c-511c339a7b58" variableName="configuration" />
		<ee:transform doc:name="Transform Message" doc:id="89623607-060a-4080-94b0-b732579ba758">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import dw::module::Multipart
import * from dw::core::Binaries
output multipart/form-data boundary="--------------------------abc123"
---
{
	parts : {
		file : {
			headers : {
				"Content-Disposition" : {
					"name": "file",
					"filename": vars.file[0].filename,
					"subtype": "form-data"
					},
				"Content-Type" : "application/pdf"
				},
			content : vars.fileData
			}
		}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="ef777a77-2031-4789-9f8e-4a1d8188840d" message='#["Calling IDP:  " ++   vars.idpExecution.full_url as String default ""]'/>
		<http:request method="${http.post_method}" doc:name="Call IDP Service" doc:id="12a5e9fd-451e-4342-bd93-49d7d84134b1" config-ref="IDP_HTTP_Request_configuration" url="#[vars.idpExecution.full_url]">
			<http:headers><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.token as String
}]]]></http:headers>
		</http:request>
		<set-variable value="#[payload.id as String]" doc:name="executionId" doc:id="aa7b3802-21b3-4ab6-b1b6-dff9d4c7173b" variableName="executionId" />
		<logger level="INFO" doc:name="Logger" doc:id="d9ae2075-6afe-4efb-89fa-1c91a745617e" message='#["============================ EXECUTION ID:     " ++ vars.executionId ++ "      ============================"]' />
	</sub-flow>
	<sub-flow name="get_Results_From_IDP_Service" doc:id="c3dee76d-0dc9-4181-b9e2-1832782f63a8" >
		<until-successful maxRetries="20" doc:name="Until Successful" doc:id="1e8e66be-ac36-4244-8cba-0cb63e5ee9af" millisBetweenRetries="6000" >
			<set-variable value='#[output application/java --- vars.idpExecution.full_url as String ++ "/" ++ vars.executionId as String]' doc:name="Set Variable" doc:id="ad073bb5-1e33-4883-a451-f99721d7144f" variableName="url"/>
			<logger level="INFO" doc:name="Logger" doc:id="7b0c9a8e-2b05-4844-b03c-3d3a392600e4" message="Calling idp: #[vars.url]" />
			<http:request method="${http.get_method}" doc:name="Get Results from IDP Service" doc:id="f21ed189-f013-4f39-ad63-5e5ebb616a02" config-ref="IDP_HTTP_Request_configuration" sendBodyMode="NEVER" url="#[vars.url]">
				<http:headers ><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.token
}]]]></http:headers>
			</http:request>
			<logger level="INFO" doc:name="Logger" doc:id="a40666e1-37b8-46b1-a3c2-483eb0804593" message="payload = #[payload]"/>
			<choice doc:name="Choice" doc:id="c3bda174-a2ef-45c9-b075-ea93e0a18742" >
				<when expression="#['SUCCEEDED' != payload.status and 'FAILED' != payload.status]" >
					<choice doc:name="Choice" doc:id="44ede4db-e345-4ffb-98ee-422e9ede8390" >
						<when expression="#['MANUAL_VALIDATION_REQUIRED' == payload.status]" >
							<logger level="INFO" doc:name="Logger" doc:id="2f8091aa-9051-4b41-b933-4ecdc53f731a" message="Manual Validation Needed" />
						</when>
						<otherwise >
							<raise-error doc:name="Raise error" doc:id="0219d46a-e86f-4407-bead-4e2ad28b381a" type="MULE:CONNECTIVITY" description="Service not done yet" />
						</otherwise>
					</choice>
				</when>
				<when expression="#['FAILED' == payload.status]" >
					<logger level="INFO" doc:name="Logger" doc:id="4698a624-707d-4bbe-b5d4-c704dd5b5b50" />
				</when>
				<otherwise >
					<logger level="INFO" doc:name="Logger" doc:id="c1d234ff-28b7-4baf-a20e-284125396ffb" message="#[payload]" />
					<ee:transform doc:name="Transform Message" doc:id="0f179097-841e-44b3-8af7-1d08e88e4411" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
						</ee:message>
					</ee:transform>
				</otherwise>
			</choice>
		</until-successful>
	</sub-flow>
	<flow name="idp_process_contractsFlow1" doc:id="1696f863-9cfd-441f-8b6b-8178440acde1" >
		<http:listener doc:name="GET /check/csv" doc:id="41e7b28b-1c06-4efb-9ac3-b3d361013ca3" config-ref="REST_Trigger_HTTP_Listener_config" path="/check/csv"/>
		<db:select doc:name="Get File with Data" doc:id="f2c45241-dce8-40de-99db-464aa3233b41" config-ref="Database_Config" target="xlsData" >
			<db:sql ><![CDATA[select job_id, filename, file_content_base64, mime_type 
from uploads where job_id = :job
and upload_type = 'data']]></db:sql>
			<db:input-parameters ><![CDATA[#[{
	job: attributes.queryParams.jobId
}]]]></db:input-parameters>
		</db:select>
		<choice doc:name="Choice" doc:id="04ee9d8c-6977-47b0-9ae9-36145d7e2f9f" >
			<when expression='#[vars.xlsData[0].mime_type == "text/csv"]' >
				<set-variable value="#[%dw 2.0&#10;    import * from dw::core::Binaries&#10;    output application/octet-stream  with binary// or the specific MIME type of your file (e.g., application/pdf, image/png)&#10;    ---&#10;    fromBase64(vars.xlsData[0].file_content_base64 as String) as Binary]" doc:name="Set File as Binary" doc:id="a6f345d4-bda3-4213-94eb-170d45fa26c3" variableName="raw" />
				<set-variable value='#[%dw 2.0output application/json&#10;---&#10;read(vars.raw, "application/csv") // produces an array of rows]' doc:name="Set Variable" doc:id="e06bd652-c987-4ad1-b3ac-95975d666e09" variableName="data" />
			</when>
			<otherwise >
				<set-variable value="#[%dw 2.0&#10;    import * from dw::core::Binaries&#10;    output application/octet-stream  with binary// or the specific MIME type of your file (e.g., application/pdf, image/png)&#10;    ---&#10;    fromBase64(vars.xlsData[0].file_content_base64 as String) as Binary]" doc:name="Set File as Binary" doc:id="e3887179-f73b-4711-876e-381c374e6e92" variableName="raw" />
				<set-variable value='#[%dw 2.0output application/csv&#10;---&#10;(read(vars.raw, "application/xlsx", {header: true})[0])]' doc:name="Set Variable" doc:id="b0b8f3e7-8c49-469e-9cd0-3cb2a969d548" variableName="csv"/>
				<set-variable value='#[%dw 2.0&#10;output application/json&#10;---&#10;read(&#10;((write(vars.csv, "application/csv")splitBy "\n" )[1 to -1])&#10;joinBy "\n", "application/csv"&#10;)]' doc:name="Set Variable" doc:id="67097db7-c0ed-479a-a15f-2f939ae8fdcb" variableName="data" />
			</otherwise>
		</choice>
		<logger level="INFO" doc:name="Logger" doc:id="3ec26382-398f-4098-83ea-42956f01bdd6" message='Excel file data: #[write(vars.data,   "application/json", {indent: 2})]' />
		<ee:transform doc:name="Transform Message" doc:id="6c4ea740-4321-4df0-bd57-5a695b41c012" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
vars.data]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<sub-flow name="authenticate_Anypoint_User" doc:id="2fcc2967-77b9-428b-a266-e2bc192a0720" >
		<http:request method="${http.post_method}" doc:name="Authenticate" doc:id="dbb79976-02ff-4632-8ddf-8468168dd778" config-ref="Anypoint_HTTP_Request_configuration" path="${anypoint_http_request.auth_path}" >
			<http:body ><![CDATA[#[%dw 2.0
output application/x-www-form-urlencoded
---
{
	"grant_type":p('anypoint_http_request.auth_grant_type'),
	"client_id": vars.idpExecution.auth_client_id,
	"client_secret": vars.idpExecution.auth_client_secret
}]]]></http:body>
			<http:headers ><![CDATA[#[output application/java
---
{
	"Content-Type" : "application/x-www-form-urlencoded"
}]]]></http:headers>
		</http:request>
		<set-variable value="#[payload.access_token]" doc:name="Bearer Token" doc:id="3e90ea13-7d25-4574-a092-ea55bd93c7f7" variableName="token" />
		<logger level="INFO" doc:name="Logger" doc:id="87501f42-7cdf-4dcf-ae31-c28a08b1aa7d" message='#["============================ BEARER TOKEN:     " ++ vars.token ++ "      ============================"]' />
	</sub-flow>
	<sub-flow name="call_IDP_Service-Original" doc:id="400e3129-d521-4f88-b922-a06afa198599" >
		<set-variable value='#[%dw 2.0&#10;output application/json&#10;---&#10;{&#10;    "type": "GENERIC",&#10;    "queries": [&#10;        {&#10;            "query": "Extract the promotional terms for each product",&#10;            "name": "terms"&#10;        },&#10;        {&#10;            "query": "Give me a list of products, units sold, reference price",&#10;            "name": "products"&#10;        },&#10;        {&#10;            "query": "What is the requestor name?",&#10;            "name": "req_name"&#10;        },&#10;        {&#10;            "query": "This is a selling contract ofr a distributor with a retailer, Summarize the document content.",&#10;            "name": "documentSummary"&#10;        }&#10;    ],&#10;    "features": [&#10;        "QUERIES"&#10;    ],&#10;    "analyzers": [&#10;        &#10;    ],&#10;    "confidenceScore": 80&#10;}]' doc:name="configuration" doc:id="00bd52a0-2798-4ec0-bd15-c378a72328a3" variableName="configuration" />
		<ee:transform doc:name="Transform Message" doc:id="cb945ab5-f35f-4c2d-a969-eb3dd37a70a1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import dw::module::Multipart
import * from dw::core::Binaries
output multipart/form-data boundary="--------------------------abc123"
---
{
	parts : {
		file : {
			headers : {
				"Content-Disposition" : {
					"name": "file",
					"filename": vars.file[0].filename,
					"subtype": "form-data"
					},
				"Content-Type" : "application/pdf"
				},
			content : vars.fileData
			},
		configuration: {
			headers : {
				"Content-Disposition" : {
					"name": "configuration",
					"subtype": "form-data"
					},
				"Content-Type" : "application/json"
				},
			content : vars.configuration
		}
		}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<http:request doc:name="Call IDP Service" doc:id="fc7e4b7f-168c-4ccb-8ee1-1b170cf78151" config-ref="IDP_HTTP_Request_configuration" method="${http.post_method}" url="#[vars.idpExecution.full_url]">
			<http:headers ><![CDATA[#[output application/java
---
{
	"Authorization" : "Bearer " ++ vars.token as String
}]]]></http:headers>
		</http:request>
		<set-variable value="#[payload.id as String]" doc:name="executionId" doc:id="7ddb14f0-a790-46a5-ac22-e59b3813f288" variableName="executionId" />
		<logger level="INFO" doc:name="Logger" doc:id="8240674e-19a4-48b8-bbc1-7586c29be124" message='#["============================ EXECUTION ID:     " ++ vars.executionId ++ "      ============================"]' />
	</sub-flow>
</mule>
